<?php
// $Id$

/**
 * @file
 * OAuth Connector module
 */

//TODO: Make something with the name - do we really want to and can we really import them?
//TODO: Trim URL of any trailing slashes/spaces

/* ************************************************************************* *
 * THEME FUNCTIONS
 * ************************************************************************* */

/**
 * Implementation of hook_theme().
 */
function oauthconnector_theme() {
  $theme = array(
    'oauthconnector_button' => array(
      'arguments' => array(),
    ),
  );

  return $theme;
}

/**
 * Theme function for the button
 */
function theme_oauthconnector_button() {
  return drupal_get_form('oauthconnector_button_form');
}


/* ************************************************************************* *
 * DRUPAL HOOKS
 * ************************************************************************* */

/**
 * Implementation of hook_connector().
 */
function oauthconnector_connector() {
  $items = array();

  // Check whether we're all set up - if we are we will return the specification of our connector
  if (variable_get('oauthconnector_consumer_key', NULL) && variable_get('oauthconnector_consumer_secret', NULL)) {
    //TODO: Add 'information callback' and 'avatar callback' as well?
    $items['oauthconnector'] = array(
      'button callback' => '_oauthconnector_button',
      'cache'           => 86400, //24 hours x 3600 seconds per hour
    );
  }

  return $items;
}


/**
 * Implementation of hook_menu().
 */
function oauthconnector_menu() {
  $items = array();

  $base = array(
    'access arguments' => array('administer oauth connector'),
    'file'             => 'oauthconnector.admin.inc',
  );

  $items['admin/build/oauthconnector'] = array(
    'title'          => 'OAuth Connector',
    'description'    => 'Add, edit and remove OAuth Connector providers from the system.',
    'page callback'  => 'oauthconnector_list_provider',
  ) + $base;
  $items['admin/build/oauthconnector/list'] = array(
    'title'          => 'List',
    'page callback'  => 'oauthconnector_list_provider',
    'type'           => MENU_DEFAULT_LOCAL_TASK,
    'weight'         => -10,
  ) + $base;
  $items['admin/build/oauthconnector/add'] = array(
    'title'          => 'Add provider',
    'page callback'  => 'oauthconnector_add_provider',
    'type'           => MENU_LOCAL_TASK,
  ) + $base;
  $items['admin/build/oauthconnector/%oauthconnector_provider/edit'] = array(
    'title'          => 'Edit provider',
    'page callback'  => 'oauthconnector_edit_provider',
    'page arguments' => array(3),
    'type'           => MENU_LOCAL_TASK,
  ) + $base;
  $items['admin/build/oauthconnector/%oauthconnector_provider/export'] = array(
    'title'          => 'Export provider',
    'page callback'  => 'drupal_get_form',
    'page arguments' => array('oauthconnector_export_provider', 3),
    'type'           => MENU_LOCAL_TASK,
  ) + $base;
  $items['admin/build/oauthconnector/%oauthconnector_provider/delete'] = array(
    'title'          => 'Delete provider',
    'page callback'  => 'drupal_get_form',
    'page arguments' => array('oauthconnector_delete_confirm_provider', 3),
    'type'           => MENU_CALLBACK,
  ) + $base;
  $items['admin/build/oauthconnector/%oauthconnector_provider/disable'] = array(
    'page callback'  => 'oauthconnector_disable_provider',
    'page arguments' => array(3),
    'type'           => MENU_CALLBACK,
  ) + $base;
  $items['admin/build/oauthconnector/%oauthconnector_provider/enable'] = array(
    'page callback'  => 'oauthconnector_enable_provider',
    'page arguments' => array(3),
    'type'           => MENU_CALLBACK,
  ) + $base;

  return $items;
}

/**
 * Implementation of hook_oauth_common_authorized().
 */
function oauthconnector_oauth_common_authorized($consumer_token, $access_token, $request_token) {
  if ($_SESSION['oauthconnector_request_key'] == $request_token->key) {
    // Delete the access token, we only need it once.
    $access_token->delete();
    unset($_SESSION['oauthconnector_request_key']);

    $providers = oauthconnector_provider_load_all();
    foreach ($providers as $provider) {
      if ($provider->consumer_key == $consumer_token->key) {
        $external_user = _oauthconnector_fetch_user($provider, $access_token, $consumer_token);
        if (!empty($external_user[$provider->mapping['uid']])) {
          _connector_log_in('oauthconnector', $provider->name . '__' . $external_user[$provider->mapping['uid']]);
        }
        else {
          //TODO: Add error message
        }
        break;
      }
    }
  }
}


/* ************************************************************************* *
 * CTOOLS INTEGRATION
 * ************************************************************************* */

/**
 * Create a new provider with defaults appropriately set from schema.
 *
 * @return stdClass
 *   A provider configuration initialized with the default values.
 */
function oauthconnector_provider_new() {
  ctools_include('export');
  return ctools_export_new_object('oauthconnector_provider');
}

/**
 * Load a single provider.
 *
 * @param string $name
 *   The name of the provider.
 * @return stdClass
 *   The provider configuration.
 */
function oauthconnector_provider_load($name) {
  ctools_include('export');
  $result = ctools_export_load_object('oauthconnector_provider', 'names', array($name));
  //TODO: Load some stuff from OAuth Common here as well? Perhaps the entire consumer?
  if (isset($result[$name])) {
    return $result[$name];
  }
  else {
    return FALSE;
  }
}

//TODO: Add method for loading only "active" oauthconnectors? Eg. those with a consumer_key? Or make it impossible to enable a provider without also supplying a consumer_key and secret?

/**
 * Load all providers.
 *
 * @return array
 *   Array of provider configuration objects keyed by provider names.
 */
function oauthconnector_provider_load_all() {
  ctools_include('export');
  return ctools_export_load_object('oauthconnector_provider');
}

/**
 * Saves a provider in the database.
 *
 * @return void
 */
function oauthconnector_provider_save($provider) {
  $update = (isset($provider->pid)) ? array('pid') : array();

  //TODO: Update the OAuth Common as well?
  if (!empty($provider->consumer_key) && !empty($provider->consumer_secret)) {
    $consumer = DrupalOAuthConsumer::load($provider->consumer_key, FALSE);
    if ($consumer) {
      $consumer->secret = $provider->consumer_secret;
      $consumer->configuration['provider_url'] = $provider->url;
      $consumer->configuration['signature_method'] = $provider->consumer_advanced['signature method'];
      $consumer->configuration['access_endpoint'] = $provider->consumer_advanced['access token endpoint'];
      $consumer->write(TRUE);
    }
    else {
      $consumer = new DrupalOAuthConsumer($provider->consumer_key, $provider->consumer_secret, 'oob', FALSE, array(
        'configuration' => array(
          'provider_url' => $provider->url,
        )
      ));
      $consumer->write();
    }

  }

  drupal_write_record('oauthconnector_provider', $provider, $update);
}

/**
 * Remove a provider.
 *
 * @return void
 */
function oauthconnector_provider_delete($provider) {
  //TODO: Also delete data from OAuth Common
  db_query("DELETE FROM {oauthconnector_provider} WHERE name = '%s' AND pid = %d", $provider->name, $provider->pid);
}

/**
 * Export a provider.
 *
 * @return string
 */
function oauthconnector_provider_export($provider, $indent = '') {
  //TODO: Try to make the exported provider disabled as default?
  ctools_include('export');
  $output = ctools_export_object('oauthconnector_provider', $provider, $indent);
  return $output;
}

/**
 * Lists all available providers.
 *
 * @return array
 */
function oauthconnector_provider_list() {
  $return = array();
  $providers = oauthconnector_provider_load_all();
  foreach ($providers as $provider) {
    $return[$provider->name] = $provider->title;
  }
  return $return;
}


/* ************************************************************************* *
 * OAUTH INTEGRATION
 * ************************************************************************* */

function _oauthconnector_button() {
  return array(
    'title' => theme('oauthconnector_button'),
    'html'  => TRUE,
  );
}

function oauthconnector_button_form(&$form_state) {
  $form = array();
  $providers = oauthconnector_provider_load_all();
  foreach ($providers as $provider) {
    if ($provider->consumer_key) {
      $form['login_' . $provider->name] = array(
        '#type'  => 'submit',
        '#value' => t('Connect with !title', array('!title' => $provider->title)),
        'provider' => array(
          '#type'  => 'value',
          '#value' => $provider,
        ),
      );
    }
  }
  return $form;
}

function oauthconnector_button_form_submit($form, &$form_state) {
  $provider = $form_state['clicked_button']['provider']['#value'];

  $consumer_token = DrupalOAuthConsumer::load($provider->consumer_key, FALSE);
  $sig_method = DrupalOAuthClient::signatureMethod(substr(strtolower($provider->consumer_advanced['signature method']), 5));

  $client = new DrupalOAuthClient($consumer_token, NULL, $sig_method); //TODO: Customize signaturemethod here
  $request_token = $client->getRequestToken($provider->consumer_advanced['request token endpoint']); //TODO: Add request_endpoint here?
  $request_token->write();

  $_SESSION['oauthconnector_request_key'] = $request_token->key;
  $auth_url = $client->getAuthorizationUrl(NULL, $provider->consumer_advanced['authorization endpoint']); //TODO: Add some endpoints here?

  drupal_goto($auth_url);
}

function _oauthconnector_fetch_user($provider, $access_token, $consumer_token = NULL) {
  // Load the consumer token if needed
  if (!$consumer_token) {
    $consumer_token = DrupalOAuthConsumer::load($access_token->consumer_key, FALSE);
  }

  $sig_method = DrupalOAuthClient::signatureMethod(substr(strtolower($provider->consumer_advanced['signature method']), 5));
  $format = ($provider->mapping['format'] == 'json' ? HttpClientBaseFormatter::FORMAT_JSON : HttpClientBaseFormatter::FORMAT_PHP);

  // Set up the rest client
  $auth   = new HttpClientOAuth($consumer_token, $access_token, $sig_method);
  $client = new HttpClient($auth, new HttpClientBaseFormatter($format));

  // Fetch the external user
  $info = FALSE;
  $request_method = empty($provider->mapping['method post']) ? 'get' : 'post';
  try {
    $info = (array)$client->{$request_method}($provider->user_resource, array());
  } catch (Exception $e) {
    //TODO: Change to watchdog?
    drupal_set_message(t('Failed to fetch user info for login: @message', array(
      '@message' => $e->getMessage(),
    )), 'error');
  }

  return $info;
}